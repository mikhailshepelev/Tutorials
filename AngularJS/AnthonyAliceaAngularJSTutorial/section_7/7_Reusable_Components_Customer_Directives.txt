Reusable components:
=====================


	Custom Directives

Variable names and normalization:
==================================

	Normalize:
	==========

	To make a consistent to a standard.

	Specifically we deal with text normalization.

	or making different strings of text consistent to a standard.

creating a directive:
=====================


by default, EA is enabled to elements and attributes.

combination of EAMC for elements,attributes,Comments and Class

Mostly attributes and elements are used

replace:true will replace the content with content specified in template.

Templates:
==========

Isolated Scope:
===============

Isolate the controller from the scope of the directive.

scope:{} gives its own directive scope.

@ => to get only text/string value of attributes

=   => tells us this is a 2 way binding that we can pass an object via this property of the scope.

assign the whole object to that attribute to get the individual obj properties.

Caution with =:
================

	we can get in trouble if we do two way data binding.

	Find yourself in unusual circumstances.


Functions on directives:
========================

& means function 

function takes an object as an argument.

pass an mapping object inside the function as param and map it to the object.

Understanding Compile:
======================

Compile and Link:
-----------------

	When building the code , the compiler converts code to a lower level language that the computer understands.

	Then the linker generates a file the computer will actually interact with.

	Linker combines all those files and builds a single file that is executable that computer interacts with.



AngularJS compile and link:
===========================

	Compiling runs only once.

	Linking runs more than once.

	Each loop has its own scope.


	So when we have nested custom directives, angular js compiles once and run pre-link.

	Looks any nested custom directives and run pre-link for them.

	After reaching the bottom of the chain, it runs post-link back up the chain.

	Post-link is safer than pre-link.

	AVOID USING PRE LINK.

	Mostly we don't use compile stage.. very rare.

Understanding linking stage:
============================

Shorthand ofr linking stage is using link()

This gives us a link() function which is similar to a running post-link 3 times.

Understanding Transclusion:
============================

Including one document inside another document.

Place a copy of one document at a particular point inside another document.